{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "version": "3.6.4",
      "file_extension": ".py",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "name": "python",
      "mimetype": "text/x-python"
    },
    "colab": {
      "name": "Deep CNN Autoencoder - Image Compression",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sanjanaamara99/naanmudhalvan/blob/main/Deep_CNN_Autoencoder_Image_Compression.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Import Libraries"
      ],
      "metadata": {
        "id": "1n4sIyJslbca"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from keras import Sequential\n",
        "from keras.layers import Dense, Conv2D, MaxPooling2D, UpSampling2D\n",
        "from keras.datasets import mnist"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2022-07-09T12:32:56.716228Z",
          "iopub.execute_input": "2022-07-09T12:32:56.71665Z",
          "iopub.status.idle": "2022-07-09T12:32:56.722023Z",
          "shell.execute_reply.started": "2022-07-09T12:32:56.716614Z",
          "shell.execute_reply": "2022-07-09T12:32:56.721203Z"
        },
        "trusted": true,
        "id": "yZzFPtSHlbcc"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Load the Dataset"
      ],
      "metadata": {
        "id": "3P7IO5welbcf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(x_train, _), (x_test, _) = mnist.load_data()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2022-07-09T12:32:56.919328Z",
          "iopub.execute_input": "2022-07-09T12:32:56.920113Z",
          "iopub.status.idle": "2022-07-09T12:32:57.248003Z",
          "shell.execute_reply.started": "2022-07-09T12:32:56.920074Z",
          "shell.execute_reply": "2022-07-09T12:32:57.247083Z"
        },
        "trusted": true,
        "id": "iT73v-Ralbcg",
        "outputId": "af69dcd0-8b7c-420a-af7e-e08bed09ed41",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# normalize the image data\n",
        "x_train = x_train.astype('float32') / 255\n",
        "x_test = x_test.astype('float32') / 255"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2022-07-09T12:32:57.2498Z",
          "iopub.execute_input": "2022-07-09T12:32:57.2509Z",
          "iopub.status.idle": "2022-07-09T12:32:57.332892Z",
          "shell.execute_reply.started": "2022-07-09T12:32:57.250859Z",
          "shell.execute_reply": "2022-07-09T12:32:57.331724Z"
        },
        "trusted": true,
        "id": "pDSoA-mDlbch"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# reshape in the input data for the model\n",
        "x_train = x_train.reshape(len(x_train), 28, 28, 1)\n",
        "x_test = x_test.reshape(len(x_test), 28, 28, 1)\n",
        "x_test.shape"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2022-07-09T12:32:57.337329Z",
          "iopub.execute_input": "2022-07-09T12:32:57.337691Z",
          "iopub.status.idle": "2022-07-09T12:32:57.345073Z",
          "shell.execute_reply.started": "2022-07-09T12:32:57.337658Z",
          "shell.execute_reply": "2022-07-09T12:32:57.344035Z"
        },
        "trusted": true,
        "id": "HeeepxQ6lbci",
        "outputId": "37434007-755e-458c-b98b-52b977453e47",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 28, 28, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "YScd6AXVlbcj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# randomly select input image\n",
        "index = np.random.randint(len(x_test))\n",
        "# plot the image\n",
        "plt.imshow(x_test[index].reshape(28,28))\n",
        "plt.gray()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2022-07-09T12:32:57.462651Z",
          "iopub.execute_input": "2022-07-09T12:32:57.463139Z",
          "iopub.status.idle": "2022-07-09T12:32:57.637883Z",
          "shell.execute_reply.started": "2022-07-09T12:32:57.463092Z",
          "shell.execute_reply": "2022-07-09T12:32:57.637138Z"
        },
        "trusted": true,
        "id": "vvJ9XzG_lbck",
        "outputId": "ee6d7341-011e-4276-d65c-87c68df2688d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# randomly select input image\n",
        "index = np.random.randint(len(x_test))\n",
        "# plot the image\n",
        "plt.imshow(x_test[index].reshape(28,28))\n",
        "plt.gray()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2022-07-09T12:32:57.639284Z",
          "iopub.execute_input": "2022-07-09T12:32:57.639731Z",
          "iopub.status.idle": "2022-07-09T12:32:57.818516Z",
          "shell.execute_reply.started": "2022-07-09T12:32:57.639702Z",
          "shell.execute_reply": "2022-07-09T12:32:57.817364Z"
        },
        "trusted": true,
        "id": "ho_wdoY2lbcm",
        "outputId": "475e8b0e-6031-4e41-e53e-a196e06a7cfb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# randomly select input image\n",
        "index = np.random.randint(len(x_test))\n",
        "# plot the image\n",
        "plt.imshow(x_test[index].reshape(28,28))\n",
        "plt.gray()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2022-07-09T12:32:57.820608Z",
          "iopub.execute_input": "2022-07-09T12:32:57.820941Z",
          "iopub.status.idle": "2022-07-09T12:32:58.00339Z",
          "shell.execute_reply.started": "2022-07-09T12:32:57.820911Z",
          "shell.execute_reply": "2022-07-09T12:32:58.002593Z"
        },
        "trusted": true,
        "id": "cqTWgCH_lbcn",
        "outputId": "7e78474d-969f-42f9-c453-8fd27ac5cc4f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        }
      },
      "execution_count": 7,
      import numpy as np
import matplotlib.pyplot as plt
from keras import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, UpSampling2D
from keras.datasets import mnist
Load the Dataset
(x_train, _), (x_test, _) = mnist.load_data()
Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz
11490434/11490434 [==============================] - 0s 0us/step
# normalize the image data
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
# reshape in the input data for the model
# reshape in the input data for the model
x_train = x_train.reshape(len(x_train), 28, 28, 1)
x_test = x_test.reshape(len(x_test), 28, 28, 1)
x_test.shape
(10000, 28, 28, 1)
Exploratory Data Analysis
# randomly select input image
index = np.random.randint(len(x_test))
# plot the image
plt.imshow(x_test[index].reshape(28,28))
plt.gray()
# randomly select input image
index = np.random.randint(len(x_test))
# plot the image
plt.imshow(x_test[index].reshape(28,28))
plt.gray()
# randomly select input image
index = np.random.randint(len(x_test))
# plot the image
plt.imshow(x_test[index].reshape(28,28))
plt.gray()
model = Sequential([
                    # encoder network
                    Conv2D(32, 3, activation='relu', padding='same', input_shape=(28, 28, 1)),
                    MaxPooling2D(2, padding='same'),
                    Conv2D(16, 3, activation='relu', padding='same'),
                    MaxPooling2D(2, padding='same'),
                    # decoder network
                    Conv2D(16, 3, activation='relu', padding='same'),
                    UpSampling2D(2),
                    Conv2D(32, 3, activation='relu', padding='same'),
                    UpSampling2D(2),
                    # output layer

                    Conv2D(1, 3, activation='sigmoid', padding='same')
])

model.compile(optimizer='adam', loss='binary_crossentropy')
model.summary()
# train the model
model.fit(x_train, x_train, epochs=20, batch_size=256, validation_data=(x_test, x_test))
# predict the results from model (get compressed images)
pred = model.predict(x_test)
313/313 [==============================] - 5s 14ms/step
# randomly select input image
index = np.random.randint(len(x_test))
# plot the image
plt.imshow(x_test[index].reshape(28,28))
plt.gray()

index = np.random.randint(len(x_test))
plt.figure(figsize=(10, 4))
# display original image
ax = plt.subplot(1, 2, 1)
plt.imshow(x_test[index].reshape(28,28))
plt.gray()
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
# display compressed image
ax = plt.subplot(1, 2, 2)
plt.imshow(pred[index].reshape(28,28))
plt.gray()
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
plt.show()
index = np.random.randint(len(x_test))
plt.figure(figsize=(10, 4))
# display original image
ax = plt.subplot(1, 2, 1)
plt.imshow(x_test[index].reshape(28,28))
plt.gray()
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
# display compressed image
ax = plt.subplot(1, 2, 2)
plt.imshow(pred[index].reshape(28,28))
plt.gray()
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
plt.show()